var _user$project$Propane$getCurrentCharts = function (model) {
	var _p0 = model.currChart;
	if (_p0.ctor === 'Nothing') {
		return _elm_lang$core$Native_List.fromArray(
			[]);
	} else {
		return A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(c.id, _p0._0);
			},
			model.charts);
	}
};
var _user$project$Propane$chartLocation = function (chart) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(chart.id.lat),
		A2(
			_elm_lang$core$Basics_ops['++'],
			', ',
			_elm_lang$core$Basics$toString(chart.id.lng)));
};
var _user$project$Propane$arrzip = F2(
	function (arr1, arr2) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_elm_lang$core$Array$toList(arr1),
			_elm_lang$core$Array$toList(arr2));
	});
var _user$project$Propane$getRange = function (arr) {
	var _p1 = A3(
		_elm_lang$core$Array$foldl,
		F2(
			function (x, _p2) {
				var _p3 = _p2;
				var nmax = A2(_elm_lang$core$Basics$max, _p3._1, x);
				var nmin = A2(_elm_lang$core$Basics$min, _p3._0, x);
				return {ctor: '_Tuple2', _0: nmin, _1: nmax};
			}),
		{ctor: '_Tuple2', _0: 1 / 0, _1: -1 / 0},
		arr);
	var minval = _p1._0;
	var maxval = _p1._1;
	var retMin = _elm_lang$core$Basics$isInfinite(minval) ? 0 : minval;
	var retMax = _elm_lang$core$Basics$isInfinite(maxval) ? 0 : maxval;
	return {ctor: '_Tuple2', _0: retMin, _1: retMax};
};
var _user$project$Propane$ystep = 10;
var _user$project$Propane$xoffset = 20;
var _user$project$Propane$xstep = 5;
var _user$project$Propane$svgHeight = 200;
var _user$project$Propane$svgWidth = 800;
var _user$project$Propane$renderVals = function (vals) {
	var calcY = function (y) {
		return (_user$project$Propane$svgHeight - (_user$project$Propane$ystep * y)) - (_user$project$Propane$ystep / 2);
	};
	var ypts = A2(_elm_lang$core$Array$map, calcY, vals);
	var ymarginals = A2(
		_elm_lang$core$Array$map,
		function (y) {
			return A2(
				_elm_lang$svg$Svg$line,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$svg$Svg_Attributes$x1('0'),
						_elm_lang$svg$Svg_Attributes$x2('5'),
						_elm_lang$svg$Svg_Attributes$strokeWidth('1'),
						_elm_lang$svg$Svg_Attributes$y1(
						_elm_lang$core$Basics$toString(y)),
						_elm_lang$svg$Svg_Attributes$y2(
						_elm_lang$core$Basics$toString(y))
					]),
				_elm_lang$core$Native_List.fromArray(
					[]));
		},
		ypts);
	var left = _user$project$Propane$xoffset - (_user$project$Propane$xstep / 4);
	var numVals = _elm_lang$core$Array$length(vals);
	var xSize = _elm_lang$core$Basics$toFloat(numVals) * _user$project$Propane$xstep;
	var right = (xSize + _user$project$Propane$xoffset) - _user$project$Propane$xstep;
	var bottomBar = A2(
		_elm_lang$svg$Svg$line,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$svg$Svg_Attributes$y1(
				_elm_lang$core$Basics$toString(_user$project$Propane$svgHeight)),
				_elm_lang$svg$Svg_Attributes$y2(
				_elm_lang$core$Basics$toString(_user$project$Propane$svgHeight)),
				_elm_lang$svg$Svg_Attributes$x1(
				_elm_lang$core$Basics$toString(left)),
				_elm_lang$svg$Svg_Attributes$x2(
				_elm_lang$core$Basics$toString(right)),
				_elm_lang$svg$Svg_Attributes$color('black'),
				_elm_lang$svg$Svg_Attributes$strokeWidth('5')
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
	var xpts = A2(
		_elm_lang$core$Array$initialize,
		numVals,
		function (_p4) {
			return A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				_user$project$Propane$xoffset,
				A2(
					F2(
						function (x, y) {
							return x * y;
						}),
					_user$project$Propane$xstep,
					_elm_lang$core$Basics$toFloat(_p4)));
		});
	var xmarginals = A2(
		_elm_lang$core$Array$map,
		function (x) {
			return A2(
				_elm_lang$svg$Svg$line,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$svg$Svg_Attributes$x1(
						_elm_lang$core$Basics$toString(x)),
						_elm_lang$svg$Svg_Attributes$x2(
						_elm_lang$core$Basics$toString(x)),
						_elm_lang$svg$Svg_Attributes$strokeWidth('1'),
						_elm_lang$svg$Svg_Attributes$y1(
						_elm_lang$core$Basics$toString(_user$project$Propane$svgHeight)),
						_elm_lang$svg$Svg_Attributes$y2(
						_elm_lang$core$Basics$toString(_user$project$Propane$svgHeight - 5))
					]),
				_elm_lang$core$Native_List.fromArray(
					[]));
		},
		xpts);
	var marginals = _elm_lang$core$Array$toList(
		A2(_elm_lang$core$Array$append, ymarginals, xmarginals));
	var pts = A2(
		_elm_lang$core$List$map,
		function (_p5) {
			var _p6 = _p5;
			return A2(
				_elm_lang$svg$Svg$circle,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$svg$Svg_Attributes$cx(
						_elm_lang$core$Basics$toString(_p6._0)),
						_elm_lang$svg$Svg_Attributes$cy(
						_elm_lang$core$Basics$toString(_p6._1)),
						_elm_lang$svg$Svg_Attributes$r('3'),
						_elm_lang$svg$Svg_Attributes$fill('red')
					]),
				_elm_lang$core$Native_List.fromArray(
					[]));
		},
		A2(_user$project$Propane$arrzip, xpts, ypts));
	var lines = function () {
		if (_elm_lang$core$Array$isEmpty(ypts)) {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			var ax = A2(
				_elm_lang$core$Maybe$withDefault,
				-1,
				A2(_elm_lang$core$Array$get, 0, xpts));
			var ay = A2(
				_elm_lang$core$Maybe$withDefault,
				-1,
				A2(_elm_lang$core$Array$get, 0, ypts));
			return _elm_lang$core$Basics$fst(
				A3(
					_elm_lang$core$List$foldl,
					F2(
						function (_p8, _p7) {
							var _p9 = _p8;
							var _p12 = _p9._1;
							var _p11 = _p9._0;
							var _p10 = _p7;
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$List_ops['::'],
									A2(
										_elm_lang$svg$Svg$line,
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$svg$Svg_Attributes$x1(
												_elm_lang$core$Basics$toString(_p10._1._0)),
												_elm_lang$svg$Svg_Attributes$x2(
												_elm_lang$core$Basics$toString(_p11)),
												_elm_lang$svg$Svg_Attributes$y1(
												_elm_lang$core$Basics$toString(_p10._1._1)),
												_elm_lang$svg$Svg_Attributes$y2(
												_elm_lang$core$Basics$toString(_p12))
											]),
										_elm_lang$core$Native_List.fromArray(
											[])),
									_p10._0),
								_1: {ctor: '_Tuple2', _0: _p11, _1: _p12}
							};
						}),
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_List.fromArray(
							[]),
						_1: {ctor: '_Tuple2', _0: ax, _1: ay}
					},
					A2(_user$project$Propane$arrzip, xpts, ypts)));
		}
	}();
	var allTogether = A2(
		_elm_lang$core$Basics_ops['++'],
		marginals,
		A2(_elm_lang$core$Basics_ops['++'], pts, lines));
	var _p13 = _user$project$Propane$getRange(vals);
	var minVal = _p13._0;
	var maxVal = _p13._1;
	var bottom = (_user$project$Propane$svgHeight - (minVal * _user$project$Propane$ystep)) - (_user$project$Propane$ystep / 2);
	var top = (_user$project$Propane$svgHeight - ((maxVal + 1) * _user$project$Propane$ystep)) + (_user$project$Propane$ystep / 2);
	var leftBar = A2(
		_elm_lang$svg$Svg$line,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$svg$Svg_Attributes$y1(
				_elm_lang$core$Basics$toString(bottom)),
				_elm_lang$svg$Svg_Attributes$y2(
				_elm_lang$core$Basics$toString(top)),
				_elm_lang$svg$Svg_Attributes$x1('0'),
				_elm_lang$svg$Svg_Attributes$x2('0'),
				_elm_lang$svg$Svg_Attributes$color('black'),
				_elm_lang$svg$Svg_Attributes$strokeWidth('5')
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
	return A2(
		_elm_lang$svg$Svg$svg,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$svg$Svg_Attributes$height(
				_elm_lang$core$Basics$toString(_user$project$Propane$svgHeight)),
				_elm_lang$svg$Svg_Attributes$width(
				_elm_lang$core$Basics$toString(_user$project$Propane$svgWidth))
			]),
		A2(
			_elm_lang$core$List_ops['::'],
			leftBar,
			A2(_elm_lang$core$List_ops['::'], bottomBar, allTogether)));
};
var _user$project$Propane$clearChart = function (chart) {
	var lastVal = A2(
		_elm_lang$core$Array$get,
		_elm_lang$core$Array$length(chart.values) - 1,
		chart.values);
	return _elm_lang$core$Native_Utils.update(
		chart,
		{
			values: _elm_lang$core$Array$fromList(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_elm_lang$core$Maybe$withDefault, 10, lastVal)
					]))
		});
};
var _user$project$Propane$addToChart = F2(
	function (chart, val) {
		return _elm_lang$core$Native_Utils.update(
			chart,
			{
				values: A2(_elm_lang$core$Array$push, val, chart.values)
			});
	});
var _user$project$Propane$initialModel = {
	charts: _elm_lang$core$Native_List.fromArray(
		[]),
	numCharts: 0,
	currChart: _elm_lang$core$Maybe$Nothing
};
var _user$project$Propane$startingVals = _elm_lang$core$Array$fromList(
	_elm_lang$core$Native_List.fromArray(
		[10]));
var _user$project$Propane$blankChart = {
	id: {lat: 0, lng: 0},
	values: _user$project$Propane$startingVals
};
var _user$project$Propane$getLast = function (arr) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		A2(
			_elm_lang$core$Array$get,
			_elm_lang$core$Array$length(arr) - 1,
			arr));
};
var _user$project$Propane$updateChart = F2(
	function (chart, val) {
		var recentVal = _user$project$Propane$getLast(chart.values);
		var newVal = A2(_elm_lang$core$Basics$max, recentVal + val, 0);
		return _elm_lang$core$Native_Utils.update(
			chart,
			{
				values: A2(_elm_lang$core$Array$push, newVal, chart.values)
			});
	});
var _user$project$Propane$update = F2(
	function (msg, model) {
		var _p14 = msg;
		switch (_p14.ctor) {
			case 'AddToChart':
				var newCharts = A2(
					_elm_lang$core$List$map,
					function (c) {
						return _elm_lang$core$Native_Utils.eq(c.id, _p14._0) ? A2(_user$project$Propane$addToChart, c, _p14._1) : c;
					},
					model.charts);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{charts: newCharts}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateChart':
				var latestVals = A2(
					_elm_lang$core$List$filter,
					function (x) {
						return _elm_lang$core$Native_Utils.cmp(x.value, 5) < 0;
					},
					A2(
						_elm_lang$core$List$map,
						function (c) {
							return {
								pos: c.id,
								value: A2(
									_elm_lang$core$Maybe$withDefault,
									0,
									A2(
										_elm_lang$core$Array$get,
										_elm_lang$core$Array$length(c.values) - 1,
										c.values))
							};
						},
						model.charts));
				var newCharts = A2(
					_elm_lang$core$List$map,
					function (c) {
						return _elm_lang$core$Native_Utils.eq(c.id, _p14._0) ? A2(_user$project$Propane$updateChart, c, _p14._1) : c;
					},
					model.charts);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{charts: newCharts}),
					_1: _user$project$GMPorts$sendChartVal(latestVals)
				};
			case 'ClearChart':
				var newCharts = A2(
					_elm_lang$core$List$map,
					function (c) {
						return _elm_lang$core$Native_Utils.eq(c.id, _p14._0) ? _user$project$Propane$clearChart(c) : c;
					},
					model.charts);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{charts: newCharts}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AddChart':
				var newCt = model.numCharts + 1;
				var newChart = _elm_lang$core$Native_Utils.update(
					_user$project$Propane$blankChart,
					{id: _p14._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							charts: A2(_elm_lang$core$List_ops['::'], newChart, model.charts),
							numCharts: newCt
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currChart: _elm_lang$core$Maybe$Just(_p14._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Propane$Chart = F2(
	function (a, b) {
		return {id: a, values: b};
	});
var _user$project$Propane$Model = F3(
	function (a, b, c) {
		return {charts: a, numCharts: b, currChart: c};
	});
var _user$project$Propane$MarkerClicked = function (a) {
	return {ctor: 'MarkerClicked', _0: a};
};
var _user$project$Propane$AddChart = function (a) {
	return {ctor: 'AddChart', _0: a};
};
var _user$project$Propane$ClearChart = function (a) {
	return {ctor: 'ClearChart', _0: a};
};
var _user$project$Propane$UpdateChart = F2(
	function (a, b) {
		return {ctor: 'UpdateChart', _0: a, _1: b};
	});
var _user$project$Propane$viewChart = function (chart) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('chart-region')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Chart for Location ',
							_user$project$Propane$chartLocation(chart)))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(
								_user$project$Propane$ClearChart(chart.id))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Clear Chart')
							]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(
								A2(_user$project$Propane$UpdateChart, chart.id, 10.0))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Refill Tank')
							]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(
								A2(_user$project$Propane$UpdateChart, chart.id, -20.0))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Empty Tank')
							]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('chart')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Propane$renderVals(chart.values)
					]))
			]));
};
var _user$project$Propane$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('viewing-area')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('charts')
					]),
				A2(
					_elm_lang$core$List$map,
					_user$project$Propane$viewChart,
					_user$project$Propane$getCurrentCharts(model)))
			]));
};
var _user$project$Propane$AddToChart = F2(
	function (a, b) {
		return {ctor: 'AddToChart', _0: a, _1: b};
	});
var _user$project$Propane$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$GMPorts$addMarker(_user$project$Propane$AddChart),
				_user$project$GMPorts$markerClicked(_user$project$Propane$MarkerClicked),
				_user$project$GMPorts$addToMarker(
				function (poswval) {
					return A2(_user$project$Propane$AddToChart, poswval.pos, poswval.value);
				}),
				_user$project$GMPorts$updateMarker(
				function (poswval) {
					return A2(_user$project$Propane$UpdateChart, poswval.pos, poswval.value);
				})
			]));
};
var _user$project$Propane$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: {ctor: '_Tuple2', _0: _user$project$Propane$initialModel, _1: _elm_lang$core$Platform_Cmd$none},
			view: _user$project$Propane$view,
			update: _user$project$Propane$update,
			subscriptions: _user$project$Propane$subscriptions
		})
};
